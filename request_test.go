package pinba

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

var validData = []byte{0xa, 0x8, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x7, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x72, 0x75, 0x1a, 0x9, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x68, 0x70, 0x20, 0x0, 0x28, 0xa6, 0x2, 0x30, 0x80, 0x80, 0x40, 0x3d, 0x7, 0x9b, 0xba, 0x3c, 0x45, 0x0, 0x0, 0x0, 0x0, 0x4d, 0xa, 0xd7, 0x23, 0x3c, 0x50, 0x1, 0x50, 0x1, 0x5d, 0x9e, 0xd2, 0xc1, 0x3b, 0x5d, 0x4a, 0x96, 0x13, 0x3a, 0x60, 0x3, 0x60, 0x1, 0x68, 0x4, 0x68, 0x6, 0x68, 0x8, 0x68, 0xa, 0x70, 0x5, 0x70, 0x7, 0x70, 0x9, 0x70, 0xb, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x61, 0x6c, 0x31, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x61, 0x67, 0x31, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x76, 0x61, 0x6c, 0x32, 0x7a, 0x8, 0x72, 0x65, 0x71, 0x5f, 0x74, 0x61, 0x67, 0x32, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x31, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x31, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x32, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x32, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x33, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x33, 0x7a, 0x4, 0x6b, 0x65, 0x79, 0x34, 0x7a, 0x4, 0x76, 0x61, 0x6c, 0x34, 0x80, 0x1, 0xc8, 0x1, 0x88, 0x1, 0x80, 0xc0, 0x85, 0x3, 0xa0, 0x1, 0x1, 0xa0, 0x1, 0x3, 0xa8, 0x1, 0x0, 0xa8, 0x1, 0x2, 0xb5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xbd, 0x1, 0x0, 0x0, 0x0, 0x0, 0xbd, 0x1, 0x0, 0x0, 0x0, 0x0}
var invalidData = []byte{0xa, 0x8, 0x70, 0x68, 0x70, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x12, 0xb, 0x6c, 0x6f, 0x76, 0x65, 0x2e, 0x6e, 0x67, 0x73, 0x2e, 0x72, 0x75, 0x1a, 0xc, 0x2f, 0x61, 0x64, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x68, 0x70, 0x20, 0xdc, 0x5, 0x28, 0x8b, 0x1, 0x30, 0x80, 0x80, 0x40, 0x3d, 0x4e, 0xe, 0x9f, 0x3b, 0x45, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x0, 0x0, 0x0, 0x0, 0x50, 0x1, 0x50, 0x3, 0x50, 0x1, 0x50, 0x1, 0x5d, 0xb8, 0x93, 0x88, 0x3a, 0x5d, 0x1e, 0xe1, 0xb4, 0x3a, 0x5d, 0x20, 0xf0, 0x40, 0x39, 0x5d, 0xde, 0x21, 0x45, 0x39, 0x60, 0x2, 0x60, 0x2, 0x60, 0x2, 0x60, 0x2, 0x68, 0x8, 0x68, 0xa, 0x68, 0x8, 0x68, 0xa, 0x68, 0x8, 0x68, 0xa, 0x68, 0x8, 0x68, 0xa, 0x70, 0x9, 0x70, 0xb, 0x70, 0xc, 0x70, 0xd, 0x70, 0xc, 0x70, 0xe, 0x70, 0xf, 0x70, 0x10, 0x7a, 0x2, 0x6e, 0x6f, 0x7a, 0x7, 0x69, 0x73, 0x5f, 0x61, 0x6a, 0x61, 0x78, 0x7a, 0x2, 0x36, 0x36, 0x7a, 0x6, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x7a, 0x7, 0x61, 0x64, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x7a, 0x4, 0x74, 0x79, 0x70, 0x65, 0x7a, 0x5, 0x67, 0x75, 0x65, 0x73, 0x74, 0x7a, 0x4, 0x75, 0x73, 0x65, 0x72, 0x7a, 0x5, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7a, 0x6, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x7a, 0x9, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7a, 0x4, 0x6c, 0x6f, 0x61, 0x64, 0x7a, 0x8, 0x6d, 0x65, 0x6d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x7a, 0x3, 0x67, 0x65, 0x74, 0x7a, 0x3, 0x61, 0x64, 0x64, 0x7a, 0x7, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7a, 0x5, 0x6d, 0x61, 0x67, 0x69, 0x71, 0x80, 0x1, 0x94, 0x3, 0x88, 0x1, 0x80, 0x80, 0xde, 0x2, 0xa0, 0x1, 0x1, 0xa0, 0x1, 0x3, 0xa0, 0x1, 0x5, 0xa0, 0x1, 0x7, 0xa8, 0x1, 0x0, 0xa8, 0x1, 0x2, 0xa8, 0x1, 0x4, 0xa8, 0x1, 0x6, 0xb5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x1, 0x0, 0x0, 0x0, 0x0, 0xb5, 0x1, 0x0}

func TestValidRequest(t *testing.T) {
	request, err := NewRequest(validData)
	assert.Nil(t, err)
	assert.NotNil(t, request)

	//t.Logf("request.Tags: %#v", request.Tags)
	// pinba.Tags{
	//		pinba.Tag{Key:"host", Value:"hostname"},
	//		pinba.Tag{Key:"server", Value:"test.ru"},
	//		pinba.Tag{Key:"script", Value:"index.php"},
	//		pinba.Tag{Key:"req_tag1", Value:"req_val1"},
	//		pinba.Tag{Key:"req_tag2", Value:"req_val2"}
	// }
	assert.Equal(t, 6, len(request.Tags))

	host, err := request.Tags.Get("host")
	assert.Nil(t, err)
	assert.Equal(t, "hostname", host)

	server, err := request.Tags.Get("server")
	assert.Nil(t, err)
	assert.Equal(t, "test.ru", server)

	script, err := request.Tags.Get("script")
	assert.Nil(t, err)
	assert.Equal(t, "index.php", script)

	script, err = request.Timers[0].Tags.Get("script")
	assert.Nil(t, err)
	assert.Equal(t, "index.php", script)

	tag1, err := request.Timers[0].Tags.Get("req_tag1")
	assert.Nil(t, err)
	assert.Equal(t, "req_val1", tag1)

	// pinba.Timers{
	//	pinba.Timer{
	// 			Tags:pinba.Tags{
	// 				pinba.Tag{Key:"key1", Value:"val1"},
	// 				pinba.Tag{Key:"key2", Value:"val2"},
	// 				pinba.Tag{Key:"key3", Value:"val3"}
	// 			},
	// 		HitCount:1,
	// 		Value:0.005915,
	// 		RuUtime:0,
	// 		RuStime:0
	// 	},
	// 	pinba.Timer{
	// 		Tags:pinba.Tags{
	// 				pinba.Tag{Key:"key4", Value:"val4"}
	// 		},
	// 		HitCount:1,
	// 		Value:0.000563,
	// 		RuUtime:0,
	// 		RuStime:0
	// 	}
	// }
	assert.Equal(t, 2, len(request.Timers))
}

func TestInvalidRequest(t *testing.T) {
	request, err := NewRequest(invalidData)
	assert.NotNil(t, err)
	assert.Nil(t, request)
}

func BenchmarkDecode(b *testing.B) {
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		NewRequest(validData)
	}
}
